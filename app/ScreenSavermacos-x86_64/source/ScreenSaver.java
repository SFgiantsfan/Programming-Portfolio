/* autogenerated by Processing revision 1282 on 2022-05-27 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ScreenSaver extends PApplet {

// realization
Line l1, l2, l3,l4, l5; 

 public void setup() {
  background(random(100, 255));
  /* size commented out by preprocessor */;
  l1 = new Line(random(width),random(height));
  l2 = new Line(random(width),random(height));
  l3 = new Line(random(width),random(height));
  l4 = new Line(random(width),random(height));
  l5 = new Line(random(width),random(height));
}

 public void draw() {
  l1.display();
  l2.display();
  l3.display();
  l4.display();
  l5.display();
}
class Line {
  // Member variables
  float xpos, ypos, strokeW, pointCount;

  // Constructor
  Line(float tempX, float tempY) {
    xpos = tempX;
    ypos = tempY;
  }

  // Display Method
   public void display() {
    if (frameCount>2000) {
      frameCount = 0;
      background(random(255));
    } else {
      strokeW = random(1,10);
      pointCount = random(10,40);
      stroke(random(20), random(255), random(200));
      strokeWeight(strokeW);
      int rand = PApplet.parseInt(random(4));
      if (xpos<0 || xpos>width || ypos<0 || ypos>height) {
        xpos = random(width);
        ypos = random(height);
      } else {
        if (rand == 0) {
          moveRight(xpos, ypos, pointCount);
        } else if (rand == 1) {
          moveUp(xpos, ypos, pointCount);
        } else if (rand == 2) {
          moveLeft(xpos, ypos, pointCount);
        } else {
          moveDown(xpos, ypos, pointCount);
        }
      }
    }
  }

  // Movement methods
   public void moveRight(float startX, float startY, float moveCount) {
    for (float i=0; i<moveCount; i++) {
      point(startX+i, startY);
      xpos = startX + i;
      ypos = startY;
    }
  }

   public void moveLeft(float startX, float startY, float moveCount) {
    for (float i=0; i<moveCount; i++) {
      point(startX-i, startY);
      xpos = startX-i;
      ypos = startY;
    }
  }

   public void moveDown(float startX, float startY, float moveCount) {
    for (float i=0; i<moveCount; i++) {
      point(startX, startY+i);
      xpos = startX;
      ypos = startY+i;
    }
  }

   public void moveUp(float startX, float startY, float moveCount) {
    for (float i=0; i<moveCount; i++) {
      point(startX, startY-i);
      xpos = startX;
      ypos = startY-i;
    }
  }
}
// Blueprint


  public void settings() { size(displayWidth, displayHeight); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "ScreenSaver" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
